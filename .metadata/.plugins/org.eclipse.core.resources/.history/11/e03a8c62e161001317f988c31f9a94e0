/**
 * 
 */
package genericXMLProcessor.SerDeser;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * @author Abhishek Waichal
 * This class is used for setting value individual data members in an object.
 */
public class DeserializeTypes {

	/**
	 * @param ob, the object whose data member named 'name' is to be set
	 * @param value, the value to be set of the data member named 'name'
	 * @param name, the name of the data member of the object whose value is to be set 
	 */
	public void setString(Object ob, String value, String name) {
		// TODO Auto-generated method stub

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, value);
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob, the object whose data member named 'name' is to be set
	 * @param value, the value to be set of the data member named 'name'
	 * @param name, the name of the data member of the object whose value is to be set 
	 */
	public void setDouble(Object ob, String value, String name) {
		// TODO Auto-generated method stub

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Double.parseDouble(value));
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob, the object whose data member named 'name' is to be set
	 * @param value, the value to be set of the data member named 'name'
	 * @param name, the name of the data member of the object whose value is to be set 
	 */
	public void setChar(Object ob, String value, String name) {
		// TODO Auto-generated method stub

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, value.charAt(0));
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob, the object whose data member named 'name' is to be set
	 * @param value, the value to be set of the data member named 'name'
	 * @param name, the name of the data member of the object whose value is to be set 
	 */
	public void setShort(Object ob, String value, String name) {
		// TODO Auto-generated method stub

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Short.parseShort(value));
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob, the object whose data member named 'name' is to be set
	 * @param value, the value to be set of the data member named 'name'
	 * @param name, the name of the data member of the object whose value is to be set 
	 */
	public void setFloat(Object ob, String value, String name) {
		// TODO Auto-generated method stub

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Float.valueOf(value));
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob, the object whose data member named 'name' is to be set
	 * @param value, the value to be set of the data member named 'name'
	 * @param name, the name of the data member of the object whose value is to be set 
	 */
	public void setLong(Object ob, String value, String name) {
		// TODO Auto-generated method stub

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Long.parseLong(value));
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob, the object whose data member named 'name' is to be set
	 * @param value, the value to be set of the data member named 'name'
	 * @param name, the name of the data member of the object whose value is to be set 
	 */
	public void setInt(Object ob, String value, String name) {
		// TODO Auto-generated method stub

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Integer.parseInt(value));
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
}