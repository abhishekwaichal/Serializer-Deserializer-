/**
 * 
 */
package genericXMLProcessor.SerDeser;

import genericXMLProcessor.driver.Debug;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * @author Abhishek Waichal Waichal
 * Class DeserializeTypes used for setting value individual data members in the object to be deserialized.
 */
public class DeserializeTypes {

	
	/**
	 * 
	 */
	public DeserializeTypes(){
		Debug.printDebug(1, "In BSTBuilder Class's Constructor");
	}
	
	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "DeserializeTypes []";
	}

	/**
	 * @param ob Object, the object whose data member named 'name' is to be set
	 * @param value String, the value to be set of the data member named 'name'
	 * @param name  String,the name of the data member of the object whose value is to be set 
	 */
	public void setString(Object ob, String value, String name) {

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, value);
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob Object, the object whose data member named 'name' is to be set
	 * @param value String, the value to be set of the data member named 'name'
	 * @param name  String,the name of the data member of the object whose value is to be set 
	 */
	public void setDouble(Object ob, String value, String name) {

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Double.parseDouble(value));
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob Object, the object whose data member named 'name' is to be set
	 * @param value String, the value to be set of the data member named 'name'
	 * @param name  String,the name of the data member of the object whose value is to be set 
	 */
	public void setChar(Object ob, String value, String name) {

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, value.charAt(0));
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob Object, the object whose data member named 'name' is to be set
	 * @param value String, the value to be set of the data member named 'name'
	 * @param name  String,the name of the data member of the object whose value is to be set 
	 */
	public void setShort(Object ob, String value, String name) {

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Short.parseShort(value));
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob Object, the object whose data member named 'name' is to be set
	 * @param value String, the value to be set of the data member named 'name'
	 * @param name  String,the name of the data member of the object whose value is to be set 
	 */
	public void setFloat(Object ob, String value, String name) {

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Float.valueOf(value));
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob Object, the object whose data member named 'name' is to be set
	 * @param value String, the value to be set of the data member named 'name'
	 * @param name  String,the name of the data member of the object whose value is to be set 
	 */
	public void setLong(Object ob, String value, String name) {

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Long.parseLong(value));
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @param ob Object, the object whose data member named 'name' is to be set
	 * @param value String, the value to be set of the data member named 'name'
	 * @param name  String,the name of the data member of the object whose value is to be set 
	 */
	public void setInt(Object ob, String value, String name) {

		Method m[] = ob.getClass().getDeclaredMethods();
		for (int i = 0; i < m.length; i++) {
			if (m[i].getName().equalsIgnoreCase("set" + name)) {
				try {
					m[i].invoke(ob, Integer.parseInt(value));
				} catch (NumberFormatException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}
}